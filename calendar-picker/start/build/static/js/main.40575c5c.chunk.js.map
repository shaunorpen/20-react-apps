{"version":3,"sources":["App.js","index.js"],"names":["days","Array","fill","map","e","i","StyledDateChooser","styled","div","StyledDateChooserButton","button","props","isChoosing","StyledCalendar","StyledCalendarDay","isSelected","css","isInbetween","App","useState","startDate","setStartDate","endDate","setEndDate","chooseType","setChooseType","hoverDate","setHoverDate","onClick","className","day","index","checkIsInbetween","key","chosenDay","onMouseOver","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4oDAIA,IAAMA,EAAOC,MAAM,IAChBC,KAAK,GACLC,KAAI,SAACC,EAAGC,GAAJ,OAAUA,EAAI,KAEfC,EAAoBC,IAAOC,IAAV,KAKjBC,EAA0BF,IAAOG,OAAV,KAUX,SAACC,GAAD,OAAYA,EAAMC,WAAa,UAAY,UAQvDC,EAAiBN,IAAOC,IAAV,KAYdM,EAAoBP,IAAOG,OAAV,KAWnB,SAACC,GAAD,OACAA,EAAMI,YACNC,YADA,QAKA,SAACL,GAAD,OACAA,EAAMM,aACND,YADA,QAYW,SAASE,IAAO,IAAD,EACMC,mBAAS,MADf,mBACrBC,EADqB,KACVC,EADU,OAEEF,mBAAS,MAFX,mBAErBG,EAFqB,KAEZC,EAFY,OAGQJ,mBAAS,SAHjB,mBAGrBK,EAHqB,KAGTC,EAHS,OAIMN,mBAAS,MAJf,mBAIrBO,EAJqB,KAIVC,EAJU,KA6B5B,OACE,oCACE,kBAACrB,EAAD,KACE,kBAACG,EAAD,CACEmB,QAAS,kBAAMH,EAAc,UAC7Bb,WAA2B,UAAfY,GAFd,cAIa,8BAAOJ,IAEpB,kBAACX,EAAD,CACEmB,QAAS,kBAAMH,EAAc,QAC7Bb,WAA2B,QAAfY,GAFd,YAIW,8BAAOF,KAIpB,kBAACT,EAAD,CAAgBgB,UAAU,YACvB7B,EAAKG,KAAI,SAAC2B,EAAKC,GACd,IAAIhB,EAAae,IAAQV,GAAaU,IAAQR,EAC1CL,EAzBZ,SAA0Ba,GACxB,OAAIV,IAAcE,EAAgBQ,EAAMV,GAAaU,EAAMJ,EACpDI,EAAMV,GAAaU,EAAMR,EAuBRU,CAAiBF,GACnC,OACE,kBAAChB,EAAD,CACEe,UAAU,eACVI,IAAKF,EACLhB,WAAYA,EACZE,YAAaA,EACbW,QAAS,kBAlDDM,EAkDkBJ,EAjDhCV,GAAac,EAAYd,GAC3BC,EAAaa,GACNT,EAAc,QAEnBH,GAAWY,EAAYZ,GACzBC,EAAWW,GACJT,EAAc,aAGJ,UAAfD,GACFH,EAAaa,GACbT,EAAc,QAEdF,EAAWW,IAdf,IAAoBA,GAmDRC,YAAa,kBAAMR,EAAaG,KAE/BA,QChIfM,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.40575c5c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport './App.css';\n\nconst days = Array(31)\n  .fill(0)\n  .map((e, i) => i + 1);\n\nconst StyledDateChooser = styled.div`\n  display: flex;\n  margin-bottom: 20px;\n`;\n\nconst StyledDateChooserButton = styled.button`\n  color: #0b204c;\n  text-transform: uppercase;\n  flex: 1;\n  padding: 15px;\n  background: none;\n  cursor: pointer;\n  border: none;\n  border-bottom: 2px solid rgba(11, 32, 76, 0.2);\n  outline: none;\n  border-color: ${(props) => (props.isChoosing ? '#0b204c' : 'none')};\n  span {\n    display: block;\n    min-height: 60px;\n    font-size: 50px;\n  }\n`;\n\nconst StyledCalendar = styled.div`\n  max-width: 400px;\n  border-radius: 10px;\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1),\n    0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  background: #0b204c;\n  color: #fff;\n  padding: 20px;\n`;\n\nconst StyledCalendarDay = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 10px;\n  transition: 0.3s ease background;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  color: #8096c1;\n  background: none;\n  ${(props) =>\n    props.isSelected &&\n    css`\n      background: #1a1a1a !important;\n      color: #eee;\n    `}\n  ${(props) =>\n    props.isInbetween &&\n    css`\n      color: #eee;\n      background: #254381;\n    `}\n\n  &:hover {\n    color: #eee;\n    background: #254381;\n  }\n`;\n\nexport default function App() {\n  const [startDate, setStartDate] = useState(null);\n  const [endDate, setEndDate] = useState(null);\n  const [chooseType, setChooseType] = useState('start');\n  const [hoverDate, setHoverDate] = useState(null);\n\n  function updateDate(chosenDay) {\n    if (startDate && chosenDay < startDate) {\n      setStartDate(chosenDay);\n      return setChooseType('end');\n    }\n    if (endDate && chosenDay > endDate) {\n      setEndDate(chosenDay);\n      return setChooseType('end');\n    }\n\n    if (chooseType === 'start') {\n      setStartDate(chosenDay);\n      setChooseType('end');\n    } else {\n      setEndDate(chosenDay);\n    }\n  }\n\n  function checkIsInbetween(day) {\n    if (startDate && !endDate) return day > startDate && day < hoverDate;\n    return day > startDate && day < endDate;\n  }\n\n  return (\n    <>\n      <StyledDateChooser>\n        <StyledDateChooserButton\n          onClick={() => setChooseType('start')}\n          isChoosing={chooseType === 'start'}\n        >\n          Start Date <span>{startDate}</span>\n        </StyledDateChooserButton>\n        <StyledDateChooserButton\n          onClick={() => setChooseType('end')}\n          isChoosing={chooseType === 'end'}\n        >\n          End Date <span>{endDate}</span>\n        </StyledDateChooserButton>\n      </StyledDateChooser>\n\n      <StyledCalendar className='calendar'>\n        {days.map((day, index) => {\n          let isSelected = day === startDate || day === endDate;\n          let isInbetween = checkIsInbetween(day);\n          return (\n            <StyledCalendarDay\n              className='calendar-day'\n              key={index}\n              isSelected={isSelected}\n              isInbetween={isInbetween}\n              onClick={() => updateDate(day)}\n              onMouseOver={() => setHoverDate(day)}\n            >\n              {day}\n            </StyledCalendarDay>\n          );\n        })}\n      </StyledCalendar>\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}